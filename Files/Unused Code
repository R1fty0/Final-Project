 def add_function(self, function_name, var_1, var_2=None, var_3=None):
        """ Add a function call that will be called when the scene is running.  """
        match function_name:
            case "add_image":
                self.function_calls.append(lambda: self.add_image(var_1, var_2, var_3))
            case "add_text":
                self.function_calls.append(lambda: self.add_text(var_1, var_2, var_3))
            case "add_color":
                self.function_calls.append(lambda: self.add_color(var_1))
            case _:
                print("Method calls and/or their arguments are invalid")


    def add_scene(self, scene):
        self.scenes.append(scene)


class Scene:
    def __init__(self, name, game_window: Window):
        """ Creates a new scene that can be run in the game window. """
        self.game_window = game_window
        self.name = name
        self.game_window.add_scene(self)


  def set_current_scene(self, scene):
        """ Set the current scene to the scene with the specified name. """
        for scenes in self.scenes:
            if scenes.name == scene.name:
                self.current_scene = scene
                break
        else:
            print(f"Scene '{scene.name}' not found.")

menu_functions = [window.add_color(WHITE), window.add_text(menu_title, WIDTH/6 - menu_title.text.get_width(), HEIGHT/6 - menu_title.text.get_height())]

case True:  # Disable an effect
                match name:
                    case key if key in self.effects and self.effects[key]:
                        self.effects[key] = False
                        print(f"Disabled text effect: {key}.")
                    case key if key in self.effects and not self.effects[key]:
                        print("Text effect already disabled.")
                    case _:
                        print(f"Invalid text effect: {name}.")



# from Characters import Collider

class Item:
    def __init__(self, name, durability, cost):
        self.name = name
        self.durability = durability
        self.cost = cost

    def reduce_durability(self, amount):
        """ Reduces the item's durability by a given amount. """
        self.durability -= amount


class Weapon(Item):
    def __init__(self, name, durability, cost, damage):
        """ Creates a weapon that can damage enemies. """
        Item.__init__(self, name, durability, cost)
        self.damage = damage

class Melee(Weapon):
    def __init__(self, name, durability, cost, damage, attack_range):
        """ Creates a melee weapon which damages enemies within a certain range. """
        Weapon.__init__(self, name, durability, cost, damage)
        self.attack_range = attack_range

class Projectile:
    def __init__(self, image, speed, impact_effect, gravity):
        """ Creates a new projectile that can fly, be effected by gravity, check for enemy collision and apply damage. """
        self.in_air = False
        pass

    def apply_gravity(self):
        """ Applies gravity to the projectile while it is airborne. """
        while self.in_air:
            pass

class Helmet(Item):
    def __init__(self, name, durability, cost, buff, character):
        """ Creates a helmet item which provides a character a buff to their stats """
        Item.__init__(self, name, durability, cost)
        # self.buff = self.determine_buff(buff)
    def take_damage(self, damage):
        """ Makes the helmet take damage. """
        self.reduce_durability(damage)

    def determine_buff(self, buff):
        """ Determines which buff the helmet provides the player. """
        pass

# Display UI Text on Screen
        Window.blit(PromptLabel,
                    (WindowWidth / 2 - PromptLabel.get_width() / 2, WindowHeight / 2 - PromptLabel.get_height() / 2))
        Window.blit(TitleLabel,
                    (WindowWidth / 2 - TitleLabel.get_width() / 2, WindowHeight / 4 - TitleLabel.get_height() / 2))
        Window.blit(MadeByLabel,
                    (WindowWidth / 2 - MadeByLabel.get_width() / 2, WindowHeight / 1.09 - MadeByLabel.get_height() / 2))



class Button(Collider):
    def __init__(self, x, y, width, height, text: Text, color=None):
        Collider.__init__(self, x, y, width, height)
        self.text = text
        self.color = color

    def draw(self, window):
        """ Draws the button to the screen. """
        pygame.draw.rect(window, self.color, self.collider)
        text_rect = self.text.text.get_rect(center=self.collider.center)
        window.blit(self.text, text_rect)

    @staticmethod
    def is_pressed() -> bool:
        """ Returns true if the button is pressed. """
        key_pressed = pygame.key.get_pressed()
        if key_pressed == pygame.MOUSEBUTTONDOWN:
            return True
        else:
            return False

    def switch_scene(self, key, scene):
        if not isinstance(scene, Scene):
            print("Error: provided scene not of scene class. ")
            return
        key_pressed = pygame.key.get_pressed()
        if key_pressed[key]:
            self.set_current_scene(scene.name)